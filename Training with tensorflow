import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from sklearn.preprocessing import LabelEncoder

print(tf.__version__)

def load_images_from_folder(folder):
    images = []
    labels = []
    for label in os.listdir(folder):
        label_path = os.path.join(folder, label)
        for filename in os.listdir(label_path):
            img_path = os.path.join(label_path, filename)
            img = cv2.imread(img_path)
            if img is not None:
                images.append(img)
                labels.append(label)
    return images, labels

def preprocess_images(images):
    processed_images = [preprocess_input(np.expand_dims(img, axis=0)) for img in images]
    return np.vstack(processed_images)

def create_model(input_shape, num_classes):
    base_model = VGG16(weights='imagenet', include_top=False, input_shape=input_shape)
    base_model.trainable = False
    model = tf.keras.models.Sequential([
        base_model,
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dense(num_classes, activation='softmax')
    ])

    # Use the recommended loss and optimizer
    model.compile(optimizer=tf.keras.optimizers.Adam(),
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
                  metrics=['accuracy'])

    return model


def train_model(images, labels, model_filename, encoder_filename):
    encoder = LabelEncoder()
    encoded_labels = encoder.fit_transform(labels)
    num_classes = len(set(encoded_labels))

    input_shape = images[0].shape
    processed_images = preprocess_images(images)

    model = create_model(input_shape, num_classes)
    model.fit(processed_images, encoded_labels, epochs=5)

    # Save the model and encoder
    model.save(model_filename + '.keras')
    np.save(encoder_filename, encoder.classes_)

# Training phase
images_folder_path = "folder"
train_model(*load_images_from_folder(images_folder_path), "trained_model", "label_encoder.npy")

print("Train Finished!")
