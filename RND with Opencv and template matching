import cv2
import numpy as np
from skimage.metrics import structural_similarity as ssim
import os

def histogram_matching(img1, img2):
    # Histogram eşleme işlemi için renkli görüntüleri gri tonlamaya dönüştürme
    img1_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    img2_gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

    # Histogram eşleme işlemi
    matched = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8)).apply(img2_gray)
    
    return matched

def resize_image(image, target_size):
    return cv2.resize(image, target_size, interpolation=cv2.INTER_AREA)

def find_best_matches(input_image_path, images_folder_name, similarity_threshold=0.8):
    # Giriş görüntüsünü yükleme
    input_image = cv2.imread(input_image_path)
    target_size = (input_image.shape[1], input_image.shape[0])  # Giriş görüntüsünün boyutları

    # Giriş görüntüsünü boyutlandırma
    input_image_resized = resize_image(input_image, target_size)

    # Giriş görüntüsünü gri tonlamaya dönüştürme
    input_image_gray = cv2.cvtColor(input_image_resized, cv2.COLOR_BGR2GRAY)

    best_matches = []  # En yüksek benzerlik skoruna sahip fotoğrafların listesi
    threshold = similarity_threshold  # Eşleşme için kabul edilebilir benzerlik eşiği

    # Klasör adını al ve bu klasördeki fotoğrafları kontrol et
    current_directory = os.getcwd()
    images_folder_path = os.path.join(current_directory, images_folder_name)

    # GPU desteği kontrolü
    if cv2.cuda.getCudaEnabledDeviceCount() > 0:
        gpu_enabled = True
        print("GPU hızlandırma kullanılıyor.")
    else:
        gpu_enabled = False
        print("GPU hızlandırma kullanılamıyor. İşlemci ile devam ediliyor.")

    # GPU üzerinden işlem yapabiliyorsak
    if gpu_enabled:
        # GPU üzerinden görüntüyü yükleyin ve işleyin
        input_image_gpu = cv2.cuda_GpuMat()
        input_image_gpu.upload(input_image_resized)

    for image_file in os.listdir(images_folder_path):
        image_path = os.path.join(images_folder_path, image_file)
        reference_image = cv2.imread(image_path)

        # Referans görüntüsünü boyutlandırma
        reference_image_resized = resize_image(reference_image, target_size)

        # Histogram eşleme işlemini uygula
        matched_image = histogram_matching(input_image_resized, reference_image_resized)

        # Benzerlik skorunu hesapla (Structural Similarity Index - SSIM)
        if gpu_enabled:
            # GPU üzerinden işlem yapabiliyorsak
            reference_image_gpu = cv2.cuda_GpuMat()
            reference_image_gpu.upload(reference_image_resized)
            ssim_map_gpu = cv2.cuda.createSSIM(input_image_gpu, reference_image_gpu)
            ssim_map = ssim_map_gpu.download()
        else:
            _, ssim_map = ssim(input_image_gray, matched_image, full=True)

        # SSIM haritasındaki toplam benzerlik skorunu kontrol et
        total_ssim = np.sum(ssim_map)

        # Eğer toplam benzerlik skoru eşiği aşılıyorsa, eşleşmeyi listeye ekle
        if total_ssim > threshold:
            match_info = {"image_file": image_file, "similarity_score": total_ssim / np.prod(ssim_map.shape)}
            best_matches.append(match_info)

    # Listeyi benzerlik skoruna göre sırala (yüksekten düşüğe)
    best_matches.sort(key=lambda x: x["similarity_score"], reverse=True)

    return best_matches[:10]  # En yüksek 10 eşleşmeyi seç

# Örnek kullanım
input_image_path = "20231120_221018_.jpg"
images_folder_path = "folder"

# En iyi eşleşen fotoğrafları bulma
best_matches = find_best_matches(input_image_path, images_folder_path)

# Sonuçları ekrana yazdırma
if best_matches:
    print("En çok eşleşen fotoğraflar:")
    for match_info in best_matches:
        print(f"- {match_info['image_file']}: Benzerlik Oranı: {match_info['similarity_score']:.2%}")
else:
    print("Eşleşme bulunamadı")
